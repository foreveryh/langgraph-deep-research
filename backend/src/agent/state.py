from __future__ import annotations

from dataclasses import dataclass, field
from typing import TypedDict, List, Optional, Dict, Any

from langgraph.graph import add_messages
from typing_extensions import Annotated


import operator
from dataclasses import dataclass, field
from typing_extensions import Annotated


class LedgerEntry(TypedDict):
    task_id: str
    description: str
    findings_summary: str  # The concise (1-2 sentence) LLM-generated summary for this task
    detailed_snippets: Optional[List[str]]  # List of relevant web_research_result strings
    citations_for_snippets: Optional[List[Dict[str, str]]]  # Maps snippets to sources


class OverallState(TypedDict):
    messages: Annotated[list, add_messages]
    user_query: str  # Store original user question
    plan: list  # Store task plan generated by planner_node
    current_task_pointer: int  # Point to current task in plan
    executed_search_queries: Annotated[list, operator.add]  # Renamed from search_query
    web_research_result: Annotated[list, operator.add]
    sources_gathered: Annotated[list, operator.add]
    initial_search_query_count: int
    max_research_loops: int
    research_loop_count: int
    reasoning_model: str
    
    # --- Day 2 additions for multi-task iteration ---
    ledger: Annotated[List[LedgerEntry], operator.add]  # Records of completed task findings
    global_summary_memory: Annotated[List[str], operator.add]  # Cross-task memory accumulation
    
    # --- Day 3 additions for richer synthesis ---
    current_task_detailed_findings: Annotated[List[Dict[str, Any]], operator.add]  # Temporary storage for current task's detailed findings
    task_specific_results: Annotated[List[Dict[str, Any]], operator.add]  # Task-specific research results with task_id
    final_report_markdown: Optional[str]  # The final synthesized report


class ReflectionState(TypedDict):
    is_sufficient: bool
    knowledge_gap: str
    follow_up_queries: Annotated[list, operator.add]
    research_loop_count: int
    number_of_ran_queries: int
    plan: list
    current_task_pointer: int


class Query(TypedDict):
    query: str
    rationale: str


class QueryGenerationState(TypedDict):
    query_list: list[Query]
    plan: list
    current_task_pointer: int


class WebSearchState(TypedDict):
    search_query: str
    id: str
    current_task_id: str


@dataclass(kw_only=True)
class SearchStateOutput:
    running_summary: str = field(default=None)  # Final report
